{"version":3,"sources":["components/Layout/Layout.js","components/TimeProgressBar/TimeProgressBar.js","components/ParrotControl/ControlBox.js","components/ParrotControl/ParrotControl.js","App.js","serviceWorker.js","index.js"],"names":["ParrotControl","props","state","loading","showInfoBox","isLogoutDoubleCheckOpen","personName","id","this","children","React","Component","TimeProgressBar","startTimer","clearInterval","timer","setState","seconds","active","setInterval","countUp","progressBarInterval","disableTimer","duration","notifyTimerEnd","nextProps","className","style","LinearProgress","value","Math","min","valueBuffer","variant","ControlBox","sendParrotCommand","command","isPerformingCommand","currentCommandDuration","perform_time","axios","post","baseUrl","params","parrot_id","cmd_id","then","res","catch","error","NotificationManager","onCommandDurationReach","getSortedCategoryList","list","categories","item","filter","ct","identifier","category","length","push","sort","c1","c2","display_order","groupCommandsByCategory","commandsByCategory","movementCommands","voiceCommands","commands","commandsInCategory","cmdElems","backgroundColor","button_color","borderColor","onClick","title","elem","$","movementBox","find","voiceBox","mvHeight","max","voiceHeight","css","renderCommands","withRouter","ParrotArea","getCommands","get","data","loaded","parrot_0","parrot_1","movement","voice","App","path","exact","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.1d8c659f.chunk.js","sourcesContent":["import React from \"react\";\nimport {NotificationContainer} from 'react-notifications';\nimport 'react-notifications/dist/react-notifications.css'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './Layout.scss';\n\nclass ParrotControl extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            showInfoBox: true,\n            isLogoutDoubleCheckOpen: false,\n            personName: \"\",\n        }\n    }\n\n\n    render() {\n        return (\n            <div id=\"Layout\">\n                {this.props.children}\n                <NotificationContainer/>\n            </div>\n        );\n    }\n}\n\nexport default ParrotControl;","import React from 'react';\n\n// import 'bootstrap/dist/css/bootstrap.css'\nimport './TimeProgressBar.scss';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst progressBarInterval = 0.1;\nexport default class TimeProgressBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            seconds: 0,\n            active: false,\n        }\n    }\n\n\n    startTimer = () => {\n        clearInterval(this.timer);\n        this.setState({seconds: 0, active: true}, () => {\n            this.timer = setInterval(this.countUp, progressBarInterval*1000);\n        })\n    }\n\n\n\n    disableTimer = () => {\n        clearInterval(this.timer);\n        this.setState({seconds: 0, active: false});\n    }\n\n    countUp = () => {\n        if (!this.state.active) {\n            this.disableTimer();\n            return;\n        }\n        if (this.state.seconds < this.props.duration) {\n            this.setState({seconds: this.state.seconds+progressBarInterval >= this.props.duration ? this.props.duration\n                        : this.state.seconds+progressBarInterval}, () => {\n                if (this.state.seconds >= this.props.duration) {\n                    this.disableTimer();\n                    if (typeof this.props.notifyTimerEnd === 'function') \n                        this.props.notifyTimerEnd();\n                }\n            });\n        }\n    }\n\n    componentDidMount() {\n        this.startTimer();\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (!nextProps.active && this.state.active)\n            this.disableTimer();\n        else if (nextProps.active && !this.state.active)\n            this.startTimer();\n    }\n    componentWillUnmount() {\n        clearInterval(this.timer);\n    }\n\n    \n    componentDidMount() {\n\n    }\n    render() {\n        if (typeof this.props.duration == \"undefined\" || this.props.duration == 0 || !this.props.active)\n            return <div className= \"\"></div>;\n        return (\n            <div className= \"progress-bar\" style= {{\"width\": \"100%\"}}>\n                <LinearProgress value= {Math.min(100, (this.state.seconds*120)/this.props.duration)} valueBuffer= {100} variant= \"determinate\"/>\n            </div>\n        );\n    }\n}","\nimport { withRouter } from \"react-router-dom\";\nimport React from 'react';\nimport axios from 'axios';\nimport {TimeProgressBar} from \"../TimeProgressBar\";\nimport {baseUrl, commandEndpoint} from '../../Api';\nimport {NotificationManager} from 'react-notifications';\nimport $ from 'jquery';\n\nclass ControlBox extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isPerformingCommand: false,\n            currentCommandDuration: 0,\n        };\n        this.movementCommands = [];\n        this.voiceCommands = [];\n    }\n\n\n    sendParrotCommand = (command) => {\n        this.setState({isPerformingCommand: true, currentCommandDuration: command.perform_time}, () => {\n            axios.post(baseUrl + commandEndpoint,\n                {},\n                {\n                    params: {\n                        parrot_id: this.props.id,\n                        cmd_id: command.id,\n                    }\n                }\n            )\n                .then(res => {\n                })\n                .catch(error => {\n                    this.setState({isPerformingCommand: false});\n                    ((message) => {NotificationManager.error(message);})('دستور ارسال نشد');\n                });\n        })\n    }\n\n    onCommandDurationReach = () => {\n        this.setState({isPerformingCommand: false});\n    }\n\n    getSortedCategoryList = (list) => {\n        let categories = [];\n        for (const item of list) {\n            if (categories.filter(ct => ct.identifier == item.category.identifier).length > 0) continue;\n            categories.push(item.category);\n        }\n        return categories.sort((c1, c2) => c1.display_order - c2.display_order);\n    }\n\n    groupCommandsByCategory = (list) => {\n        let commandsByCategory = {};\n\n        for (const item of list) {\n            if (!(item.category.identifier in commandsByCategory))\n                commandsByCategory[item.category.identifier] = [];\n\n            commandsByCategory[item.category.identifier].push(item);\n        }\n\n        return commandsByCategory;\n\n    }\n\n    renderCommands(list) {\n        let categories = this.getSortedCategoryList(list);\n        let commandsByCategory = this.groupCommandsByCategory(list);\n\n        let commands = []\n\n        for (const category of categories) {\n            const commandsInCategory = commandsByCategory[category.identifier];\n            \n            let cmdElems = [];\n            for (const item of commandsInCategory) {\n                cmdElems.push(\n                    <div className= \"button-surrounding\">\n                        <button\n                            className= {`btn btn-primary`}\n                            style= {{\n                                backgroundColor: `${item.category.button_color}`,\n                                borderColor: `${item.category.button_color}`\n                            }}\n                            onClick= {() => {this.sendParrotCommand(item)}}>{item.title}\n                        </button>\n                    </div>\n                );\n            }\n            commands.push(\n                <div className=\"d-flex flex-row-reverse flex-wrap pt-1 pb-3 category-buttons w-100\">\n                    {cmdElems}\n                </div>\n            )\n        }\n\n        return commands;\n    }\n\n\n    componentDidMount() {\n        let elem = $(`.p_${this.props.id}`);\n        let movementBox = elem.find(\".command-section.movement\");\n        let voiceBox = elem.find(\".command-section.voice\");\n\n        let mvHeight = Math.max(Math.min(70, 100*this.props.movementCommands.length/(this.props.movementCommands.length + this.props.voiceCommands.length)), 30);\n        let voiceHeight = 100 - mvHeight;\n        movementBox.css(\"height\" , `${mvHeight}%`);\n        voiceBox.css(\"height\" , `${voiceHeight}%`);\n    }\n\n    render() {\n        return (\n                <div className= {`ParrotControlBox p_${this.props.id} w-100 d-flex flex-column visible\n                                ${this.state.isPerformingCommand ? \" disabled\" : \"\"}`}>\n                    <TimeProgressBar\n                        active= {this.state.isPerformingCommand} duration= {this.state.currentCommandDuration}\n                        notifyTimerEnd= {this.onCommandDurationReach}\n                    />\n                    <div className= \"command-section pb-3 px-0 w-100 align-items-center movement order-1\">\n                        <div className=\"card-header w-100 px-md-4 px-2 mx-0 px-0\">دستورات حرکتی</div>\n                        <div className= \"command-box py-4 px-md-4 px-2\">\n                            {this.renderCommands(this.props.movementCommands)}\n                        </div>\n                    </div>\n                    <div className= \"command-section pb-3 px-0 w-100  flex-column align-items-center voice order-0\">\n                        <div className=\"card-header w-100 px-md-4 px-2 mx-0 px-0\">دستورات صوتی</div>\n                        <div className= \"command-box py-4 px-md-4 px-2\">\n                            {this.renderCommands(this.props.voiceCommands)}\n                        </div>\n                    </div>\n                </div>\n        );\n    }\n}\n\nexport default withRouter(ControlBox);","\nimport { withRouter } from \"react-router-dom\";\nimport React from 'react';\nimport axios from 'axios';\nimport {Layout} from \"../Layout\";\nimport ControlBox from \"./ControlBox\";\nimport './ParrotControl.scss';\nimport {baseUrl, commandEndpoint} from '../../Api';\nimport {NotificationManager} from 'react-notifications';\n\nclass ParrotArea extends React.Component{\n    render() {\n        return (\n            <div className={`parrot-area p-md-5 p-3 flex-grow-1 w-100 h-100 ${this.props.className}`}>\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nclass ParrotControl extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false\n        }\n        this.commands = {\n            parrot_0: {},\n            parrot_1: {}\n        };\n    }\n\n    componentDidMount() {\n        this.getCommands();\n    }\n\n    getCommands = () => {\n        axios.get(baseUrl + commandEndpoint, {\n        })\n            .then(res => {\n                this.commands = res.data;\n                this.setState({loaded: true});\n            })\n            .catch(error => {\n                ((message) => {NotificationManager.error(message);})('خط در ارتباط با سرور');\n            });\n    }\n\n    render() {\n        return (\n            <Layout>\n                <div id=\"ParrotControl\" className=\"d-flex flex-row\">\n                    {\n                        this.state.loaded == false ? null :\n                        (<>\n                            <ParrotArea className=\"red-parrot\">\n                                <ControlBox id={'0'} movementCommands={this.commands.parrot_0.movement} voiceCommands={this.commands.parrot_0.voice}/>\n                            </ParrotArea>\n                            <ParrotArea className=\"blue-parrot\">\n                                <ControlBox id={'1'} movementCommands={this.commands.parrot_1.movement} voiceCommands={this.commands.parrot_1.voice}/>\n                            </ParrotArea>\n                        </>)\n                    }\n                </div>\n            </Layout>\n        );\n    }\n}\n\nexport default withRouter(ParrotControl);","import React, { Component } from 'react';\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport {ParrotControl} from \"./components/ParrotControl\";\n\nclass App extends Component {\n\n  render() {\n    return (\n        <>\n          <BrowserRouter>\n            <>\n              <Route path='/' exact={true} render={() => <ParrotControl/>} />\n            </>\n          </BrowserRouter>\n        </>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}