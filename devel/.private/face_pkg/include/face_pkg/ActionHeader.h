// Generated by gencpp from file face_pkg/ActionHeader.msg
// DO NOT EDIT!


#ifndef FACE_PKG_MESSAGE_ACTIONHEADER_H
#define FACE_PKG_MESSAGE_ACTIONHEADER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace face_pkg
{
template <class ContainerAllocator>
struct ActionHeader_
{
  typedef ActionHeader_<ContainerAllocator> Type;

  ActionHeader_()
    : seq(0)
    , stamp()
    , command_type()  {
    }
  ActionHeader_(const ContainerAllocator& _alloc)
    : seq(0)
    , stamp()
    , command_type(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _seq_type;
  _seq_type seq;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type_type;
  _command_type_type command_type;





  typedef boost::shared_ptr< ::face_pkg::ActionHeader_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::face_pkg::ActionHeader_<ContainerAllocator> const> ConstPtr;

}; // struct ActionHeader_

typedef ::face_pkg::ActionHeader_<std::allocator<void> > ActionHeader;

typedef boost::shared_ptr< ::face_pkg::ActionHeader > ActionHeaderPtr;
typedef boost::shared_ptr< ::face_pkg::ActionHeader const> ActionHeaderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::face_pkg::ActionHeader_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::face_pkg::ActionHeader_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::face_pkg::ActionHeader_<ContainerAllocator1> & lhs, const ::face_pkg::ActionHeader_<ContainerAllocator2> & rhs)
{
  return lhs.seq == rhs.seq &&
    lhs.stamp == rhs.stamp &&
    lhs.command_type == rhs.command_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::face_pkg::ActionHeader_<ContainerAllocator1> & lhs, const ::face_pkg::ActionHeader_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace face_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::face_pkg::ActionHeader_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::face_pkg::ActionHeader_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::face_pkg::ActionHeader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::face_pkg::ActionHeader_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::face_pkg::ActionHeader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::face_pkg::ActionHeader_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::face_pkg::ActionHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ac1cca4c394f260feb2e7efafd2f5dc";
  }

  static const char* value(const ::face_pkg::ActionHeader_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ac1cca4c394f260ULL;
  static const uint64_t static_value2 = 0xfeb2e7efafd2f5dcULL;
};

template<class ContainerAllocator>
struct DataType< ::face_pkg::ActionHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "face_pkg/ActionHeader";
  }

  static const char* value(const ::face_pkg::ActionHeader_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::face_pkg::ActionHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"  uint32 seq\n"
"  time stamp\n"
"  string command_type\n"
"\n"
;
  }

  static const char* value(const ::face_pkg::ActionHeader_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::face_pkg::ActionHeader_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.seq);
      stream.next(m.stamp);
      stream.next(m.command_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActionHeader_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::face_pkg::ActionHeader_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::face_pkg::ActionHeader_<ContainerAllocator>& v)
  {
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "command_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FACE_PKG_MESSAGE_ACTIONHEADER_H
