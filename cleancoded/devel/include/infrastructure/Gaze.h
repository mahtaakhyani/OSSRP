// Generated by gencpp from file infrastructure/Gaze.msg
// DO NOT EDIT!


#ifndef INFRASTRUCTURE_MESSAGE_GAZE_H
#define INFRASTRUCTURE_MESSAGE_GAZE_H

#include <ros/service_traits.h>


#include <infrastructure/GazeRequest.h>
#include <infrastructure/GazeResponse.h>


namespace infrastructure
{

struct Gaze
{

typedef GazeRequest Request;
typedef GazeResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct Gaze
} // namespace infrastructure


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::infrastructure::Gaze > {
  static const char* value()
  {
    return "14f8acfcacac2e0e693c25a032fd2de8";
  }

  static const char* value(const ::infrastructure::Gaze&) { return value(); }
};

template<>
struct DataType< ::infrastructure::Gaze > {
  static const char* value()
  {
    return "infrastructure/Gaze";
  }

  static const char* value(const ::infrastructure::Gaze&) { return value(); }
};


// service_traits::MD5Sum< ::infrastructure::GazeRequest> should match
// service_traits::MD5Sum< ::infrastructure::Gaze >
template<>
struct MD5Sum< ::infrastructure::GazeRequest>
{
  static const char* value()
  {
    return MD5Sum< ::infrastructure::Gaze >::value();
  }
  static const char* value(const ::infrastructure::GazeRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::infrastructure::GazeRequest> should match
// service_traits::DataType< ::infrastructure::Gaze >
template<>
struct DataType< ::infrastructure::GazeRequest>
{
  static const char* value()
  {
    return DataType< ::infrastructure::Gaze >::value();
  }
  static const char* value(const ::infrastructure::GazeRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::infrastructure::GazeResponse> should match
// service_traits::MD5Sum< ::infrastructure::Gaze >
template<>
struct MD5Sum< ::infrastructure::GazeResponse>
{
  static const char* value()
  {
    return MD5Sum< ::infrastructure::Gaze >::value();
  }
  static const char* value(const ::infrastructure::GazeResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::infrastructure::GazeResponse> should match
// service_traits::DataType< ::infrastructure::Gaze >
template<>
struct DataType< ::infrastructure::GazeResponse>
{
  static const char* value()
  {
    return DataType< ::infrastructure::Gaze >::value();
  }
  static const char* value(const ::infrastructure::GazeResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // INFRASTRUCTURE_MESSAGE_GAZE_H
