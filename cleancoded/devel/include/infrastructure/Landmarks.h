// Generated by gencpp from file infrastructure/Landmarks.msg
// DO NOT EDIT!


#ifndef INFRASTRUCTURE_MESSAGE_LANDMARKS_H
#define INFRASTRUCTURE_MESSAGE_LANDMARKS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace infrastructure
{
template <class ContainerAllocator>
struct Landmarks_
{
  typedef Landmarks_<ContainerAllocator> Type;

  Landmarks_()
    : face()
    , left_hand()
    , right_hand()
    , pose()  {
    }
  Landmarks_(const ContainerAllocator& _alloc)
    : face(_alloc)
    , left_hand(_alloc)
    , right_hand(_alloc)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _face_type;
  _face_type face;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _left_hand_type;
  _left_hand_type left_hand;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _right_hand_type;
  _right_hand_type right_hand;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _pose_type;
  _pose_type pose;





  typedef boost::shared_ptr< ::infrastructure::Landmarks_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::infrastructure::Landmarks_<ContainerAllocator> const> ConstPtr;

}; // struct Landmarks_

typedef ::infrastructure::Landmarks_<std::allocator<void> > Landmarks;

typedef boost::shared_ptr< ::infrastructure::Landmarks > LandmarksPtr;
typedef boost::shared_ptr< ::infrastructure::Landmarks const> LandmarksConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::infrastructure::Landmarks_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::infrastructure::Landmarks_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::infrastructure::Landmarks_<ContainerAllocator1> & lhs, const ::infrastructure::Landmarks_<ContainerAllocator2> & rhs)
{
  return lhs.face == rhs.face &&
    lhs.left_hand == rhs.left_hand &&
    lhs.right_hand == rhs.right_hand &&
    lhs.pose == rhs.pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::infrastructure::Landmarks_<ContainerAllocator1> & lhs, const ::infrastructure::Landmarks_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace infrastructure

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::infrastructure::Landmarks_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::infrastructure::Landmarks_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::infrastructure::Landmarks_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::infrastructure::Landmarks_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::infrastructure::Landmarks_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::infrastructure::Landmarks_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::infrastructure::Landmarks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "58ff724fd227fb57ee478929cb224b52";
  }

  static const char* value(const ::infrastructure::Landmarks_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x58ff724fd227fb57ULL;
  static const uint64_t static_value2 = 0xee478929cb224b52ULL;
};

template<class ContainerAllocator>
struct DataType< ::infrastructure::Landmarks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "infrastructure/Landmarks";
  }

  static const char* value(const ::infrastructure::Landmarks_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::infrastructure::Landmarks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[] face\n"
"geometry_msgs/Point[] left_hand\n"
"geometry_msgs/Point[] right_hand\n"
"geometry_msgs/Point[] pose\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::infrastructure::Landmarks_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::infrastructure::Landmarks_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.face);
      stream.next(m.left_hand);
      stream.next(m.right_hand);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Landmarks_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::infrastructure::Landmarks_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::infrastructure::Landmarks_<ContainerAllocator>& v)
  {
    s << indent << "face[]" << std::endl;
    for (size_t i = 0; i < v.face.size(); ++i)
    {
      s << indent << "  face[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.face[i]);
    }
    s << indent << "left_hand[]" << std::endl;
    for (size_t i = 0; i < v.left_hand.size(); ++i)
    {
      s << indent << "  left_hand[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.left_hand[i]);
    }
    s << indent << "right_hand[]" << std::endl;
    for (size_t i = 0; i < v.right_hand.size(); ++i)
    {
      s << indent << "  right_hand[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.right_hand[i]);
    }
    s << indent << "pose[]" << std::endl;
    for (size_t i = 0; i < v.pose.size(); ++i)
    {
      s << indent << "  pose[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.pose[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // INFRASTRUCTURE_MESSAGE_LANDMARKS_H
