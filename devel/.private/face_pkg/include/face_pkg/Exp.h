// Generated by gencpp from file face_pkg/Exp.msg
// DO NOT EDIT!


#ifndef FACE_PKG_MESSAGE_EXP_H
#define FACE_PKG_MESSAGE_EXP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace face_pkg
{
template <class ContainerAllocator>
struct Exp_
{
  typedef Exp_<ContainerAllocator> Type;

  Exp_()
    : seq(0)
    , time()
    , action()
    , emotion()
    , auto_imit(false)  {
    }
  Exp_(const ContainerAllocator& _alloc)
    : seq(0)
    , time()
    , action(_alloc)
    , emotion(_alloc)
    , auto_imit(false)  {
  (void)_alloc;
    }



   typedef uint32_t _seq_type;
  _seq_type seq;

   typedef ros::Time _time_type;
  _time_type time;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _emotion_type;
  _emotion_type emotion;

   typedef uint8_t _auto_imit_type;
  _auto_imit_type auto_imit;





  typedef boost::shared_ptr< ::face_pkg::Exp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::face_pkg::Exp_<ContainerAllocator> const> ConstPtr;

}; // struct Exp_

typedef ::face_pkg::Exp_<std::allocator<void> > Exp;

typedef boost::shared_ptr< ::face_pkg::Exp > ExpPtr;
typedef boost::shared_ptr< ::face_pkg::Exp const> ExpConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::face_pkg::Exp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::face_pkg::Exp_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::face_pkg::Exp_<ContainerAllocator1> & lhs, const ::face_pkg::Exp_<ContainerAllocator2> & rhs)
{
  return lhs.seq == rhs.seq &&
    lhs.time == rhs.time &&
    lhs.action == rhs.action &&
    lhs.emotion == rhs.emotion &&
    lhs.auto_imit == rhs.auto_imit;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::face_pkg::Exp_<ContainerAllocator1> & lhs, const ::face_pkg::Exp_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace face_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::face_pkg::Exp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::face_pkg::Exp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::face_pkg::Exp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::face_pkg::Exp_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::face_pkg::Exp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::face_pkg::Exp_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::face_pkg::Exp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "482c620b9db5aa1eb01410b3c618ded5";
  }

  static const char* value(const ::face_pkg::Exp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x482c620b9db5aa1eULL;
  static const uint64_t static_value2 = 0xb01410b3c618ded5ULL;
};

template<class ContainerAllocator>
struct DataType< ::face_pkg::Exp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "face_pkg/Exp";
  }

  static const char* value(const ::face_pkg::Exp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::face_pkg::Exp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 seq\n"
"time time\n"
"string action\n"
"string emotion\n"
"bool auto_imit\n"
;
  }

  static const char* value(const ::face_pkg::Exp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::face_pkg::Exp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.seq);
      stream.next(m.time);
      stream.next(m.action);
      stream.next(m.emotion);
      stream.next(m.auto_imit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Exp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::face_pkg::Exp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::face_pkg::Exp_<ContainerAllocator>& v)
  {
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action);
    s << indent << "emotion: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.emotion);
    s << indent << "auto_imit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_imit);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FACE_PKG_MESSAGE_EXP_H
